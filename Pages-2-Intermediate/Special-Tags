:: Special-Tags [chapter menu] {"position":"2000,1100","size":"200,100"}
<h1>More Special Passages and Tags</h1>
Aside from the [[Basic Special Passages|Special-Passage]], your project can be customised even further with more Special Passage Names and Special tags.

* [[Special Tags creating Special Passages and Functionalities|Tags-Built]]
* [[Process Code Before and After Rendering a Passage|SP-PassageReady-Done]]
* [[Changing the UI of the Project|SP-StoryInterface]]
* [[Customising Passages with Tags|Tags-CSS]]
* [[Including Assets with Tags|Tags-Asset]] [ ★ NEW ★ ]
* [[The Special Variables|SP-Variables]] [ ★ NEW ★ ]

<div id="link-menu">[[Back to the Start Menu|Start]]</div>

:: Tags-Built [page] {"position":"2000,1200","size":"100,100"}
<h1>Special Tags creating Special Passages and Functionalities</h1>
Along with [[Special Passages|Special-Passage]], SugarCube uses special passage tags to either create new Special Passages or affect the passage itself.
> ''Note:'' only use those tags when needed, as it can affect how Twine loads the project.
\
To add a tag to a passage on Twine, open the relevant passage, click {{{+ Tag}}} in the passage menu, and fill in the blanks. If a tag has been assigned to another passage, it will show in the {{{Add Tag}}} listbox. You can also assign a colour to the tag.
For Twee files, add the tag inside {{{[ ]}}} next to the passage name. For tags with multiple words, add a {{{-}}} between them ({{{[like-this]}}}) For multiple tags, add a space in between ({{{[nobr widget]}}}).
\
<h3>{{{nobr}}}</h3>\
Like the [[macro of the same name|Macro-Nobr-Silent]], the {{{nobr}}} tag removes every break to a new line in the passage. However, unlike the macro, it will affect the whole passage, rather than what was added inside the macro. This tag is most useful in passages with a lot of code, like a widget passage.
{{{
    :: Passage [nobr]
    This passage will not have line breaks.
    Even if the code is formatted with line breaks.
}}}
> ''Note:'' to target the whole project rather than a passage, it is best to use the [[Config.nobr|Basic-API-Config]] API instead.
\
<h3>{{{widget}}}</h3>\
As the name suggest, this tag is meant to create a special passage to set up {{{<<widget>>}}} [[macros|Macro-Widget]]. 
{{{
    :: Some Widgets [widget]
    <<widget "Test">>this is a test widget<</widget>>
}}}
> ''Note:'' while you can have multiple passages with this tag, it is recommended to keep it to a minimum.
\
<h3>{{{bookmark}}}</h3>\
This widget is meant to populate the [[JumpTo Functionlity|Basic-API-UI]], to go back in the player history.
{{{
    :: Passage [bookmark]
    If the player read this passages, it will appear in the JumpTo dialog box.
}}}
> ''Note:'' if JumpTo is not used in a project, you can also use this tag as if it were a "regular" tag.
\
<h3>{{{script}}}</h3>\
This tag is meant to tell Twine that this passage only contains JavaScript code. It is not necessary for Twine users, as JavaScript code should be placed in the {{{Edit JavaScript}}} passage, in the //Story// menu. 

As for Twee files, it is only necessary if the file should be imported into the Twine app, and only one passage should be tagged as such. If you are using a compile (like Tweego), it is recommended to simply use a separate {{{.js}}} file (or multiple files) rather than create a {{{script}}} tagged passage. The files will be loaded in alphabetical order.
{{{
    :: The JavaScript Code [script]
}}}
> ''Note:'' you cannot change the name of the JavaScript passage on Twine.
\
<h3>{{{stylesheet}}}</h3>\
This tag is meant to tell Twine that this passage only contains CSS code. It is not necessary for Twine users, as CSS code should be placed in the {{{Edit Stylesheet}}} passage, in //Story// the menu. 

As for Twee files, it is only necessary if the file should be imported into the Twine app, and only one passage should be tagged as such. If you are using a compile (like Tweego), it is recommended to simply use a separate {{{.css}}} file (or multiple files) rather than create a {{{stylesheet}}} tagged passage. The files will be loaded in alphabetical order.
{{{
    :: The CSS Code [stylesheet]
}}}
> ''Note:'' you cannot change the name of the StyleSheet passage on Twine.
\
<h3>{{{init}}}</h3>\
This tag is meant to be used for add-ons/library, as it loads at the beginning initialization. It creates a passage that works like {{{StoryInit}}}. However, for 99% of projects created in Twine, this tag is unnecessary. Instead, the Special passage {{{StoryInit}}} should be used.
{{{
    :: initialization [init]
}}}

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>

:: SP-PassageReady-Done [page] {"position":"2100,1200","size":"100,100"}
<h1>Process Code Before and After Rendering a Passage</h1>
{{{PassageReady}}} and {{{PassageDone}}} are two Special Passages that will trigger respectively before and after the story passage renders. Those passages will not render any output (i.e. text) on the page, but will run code for every new story passage visited. 
They are best used for code meant to be used for multiple passages during the game, such as checking the location of the player to trigger some code or change the display of the page.
{{{
    :: PassageReady 
    <<if $var is 0>><<goto "END">><</if>>
    <<if $points is 100>><<set $level++, $point to 0>><</if>>
    <<if not tags().includes('noreturn')>><<set $return to passage()>><</if>>

    :: PassageDone
    <<if tags().includes('bar')>><<addclass ".bottle" "empty">><</if>>
}}}
> ''Note:'' for some functionality (like [[overriding navigations|Basic-Config-Navig]] or [[Arbitrarily long returns|Long-Return-JS]]), it may be best to use JavaScript instead.
\
<h3>{{{PassageReady}}} or {{{PassageDone}}}</h3>\
While the passages will allow most code on the page (aside from DOM macros ([[text|Macro-ApPreRepCopy]]/[[class|Macro-DOM-Adv]]), which should only be added to {{{PassageDone}}}), whether a code is loaded before or after the passage is rendered will affect the development of the story.
{{{
Loading order:
    → PassageReady
    → PassageHeader
    → the content of the current Passage
    → PassageFooter
    → PassageDone
}}}
> The full ordered lists of events happening when a new passage is rendering can be found in the [[documentation|http://www.motoslave.net/sugarcube/2/docs/#events-navigation]].

Because of the loading order, placing code in {{{PassageReady}}} or {{{PassageDone}}} will not only affect the currently displayed passage, but also code from the previous passage.
Assuming that {{{$var is 2}}} before moving to a passage:
{{{
    :: Next Passage 
    <<if $var is 2>>
        The dog sleeps in the cottage.
    <<elseif $var is 1>>
        The dog yaps at the door.
    <<else>>
        The dog is not here.
    <</if>>
}}}
If the value of {{{$var}}} is changed inside {{{PassageReady}}}, the code above will be affected, and the displayed sentence will be different. However, if the value of {{{$var}}} is changed inside {{{PassageDone}}}, the code above will not be affected, but it may affect future passages.

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>


:: SP-StoryInterface [page] {"position":"2000,1300","size":"100,100"}
<h1>Changing the UI of the Project</h1>
If you want to ditch the basic SugarCube UI and have something more custom for your project, you will need to use the Special Passage {{{StoryInterface}}}. This passage only accepts HTML, and JavaScript inside a {{{<script>}}} markup at the bottom of the passage.
> ''Note:'' while knowledge of HTML and CSS is necessary to create your own UI, there are many templates available to use as is. See <<link "Credits">><<popup "Credits" "Credits">><</link>> for the Masterlist. Still, it is heavily recommended to understand the basics of both languages, when starting on your own.

This passage only has one requirement to run properly: include the {{{#passages}}} element.
{{{
    :: StoryInterface 
    <div id="passages"></div>
}}}
> ''Note:'' do not include anything inside the {{{#passages}}} div. It is the element that display the passage.

You can add any other element inside {{{StoryInterface}}}, even nesting elements inside one another:
{{{
    <div id="header">
        <h1>Title of the Game</h1>
    </div>
}}}
> //For a full example://
{{{
    <div id="parent">
        <div id="passages"></div>
        <div id="menu" data-passage="sidemenu">
            <!--Side menu, editable in the sidemenu passage-->
        </div>
    </div>
    <script>
        function myFunction() {
            document.getElementById("myMenu").classList.toggle("show");
        }
            
        /*Close the dropdown menu if the user clicks outside of it*/
        window.onclick = function(event) {
            if (!event.target.matches('.dropbtn')) {
                var dropdowns = document.getElementsByClassName("dropup-content");
                var i;
                for (i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                    openDropdown.classList.remove('show');
                    }
                }
            }
        }
    </script>
}}}
> ''Note:'' This is the code in my [[One Page Template|https://manonamora.itch.io/twine-sugarcube-templates]].
\
<h3>Formatting the elements</h3>\
When the wanted and required elements are defined in {{{StoryInterface}}}, you will need some CSS to place them on the page, and to format their contents. 
No matter how edited the interface has been, some elements will still keep their built-in CSS rules:
* {{{#passages}}} and its child {{{.passage}}}
* {{{#ui-overlay}}}, {{{#ui-dialog}}} and its children (the elements in a the dialog box)
\
If other [[base IDs and classes|http://www.motoslave.net/sugarcube/2/docs/#html]] were used when adding elements inside {{{StoryInterface}}}, those elements will also be displayed according to their respective built-in CSS rules.
> ''Note:'' like with the base UI, those rules can be changed in the StyleSheet.
{{{
    #parent {
        width: 50vh;
        margin: auto;
        display: flex;
    }
    #passages {
        width: 75%;
    }
    #menu {
        width: 25%;
    }
}}}
\
When setting sizes or placements of elements, it is important to keep in mind that your project may be viewed on ''different screens/browser window sizes''. This will affect the actual placement and display of elements on the screen. Testing the UI for different screen sizes can be done via the Inspect Tool of your browser.
> ''Note:'' testing on both Chromium and non-Chromium browsers should be done as well, as different CSS rules (ex: overflow) will render differently on screen. 
\
To help take this into account, the {{{@media}}} CSS rule will let you define different sizes and placement of elements on the page depending on the size of the window or device opening the project. See [[this page|Int-JS-CSS-Media]].
{{{
    @media screen and (max-width: 500px) {
        #parent {
            width: 100vw;
        }
    }
}}}
> ''Note:'' this should be placed at the bottom of the StyleSheet, and in order of most-restricting to most-inclusive.
\
<h3>Linking an Element to a passage</h3>\
To keep the code in {{{StoryInterface}}} simple, or because you need SugarCube code inside an element (which won't work inside that passage), you can create links between an element and a non-story passage. That passage will then display text and/or run the relevant code inside that element.
This can be done with either {{{data-passage}}} or {{{data-init-passage}}}.
{{{
    <div class="menu" data-passage="sidemenu">
        <!--Side menu, editable in the sidemenu passage-->
    </div>
    <div class="title" data-init-passage="title">
        <!-- Title, editable in the "title" passage-->
    </div>
}}}
> ''Note:'' any text coded inside the elements in {{{StoryInterface}}} will be overriden by the content of the linked passage.
\
While these two links seem interchangeable, there is a major difference between the two: {{{data-init-passage}}} will load at the start of the game and ''never'' change, while {{{data-passage}}} will update with every new passage visited (if an update is necessary).

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>

/*TODO -> other use of tada-passage*/

:: Tags-CSS [page] {"position":"2100,1300","size":"100,100"}
<h1>Customising Passages with Tags</h1>
Aside from [[creating Special Passages or Functionalities|Tags-Built]], tags can also be used to customise how a passage looks. For example, if multiple passages are set in a forest, one can add a tag called {{{forest}}} to those passages, and use this tag to set an image of a forest in the background of those passages.

To add a tag to a passage on Twine, open the relevant passage, click {{{+ Tag}}} in the passage menu, and fill in the blanks. If a tag has been assigned to another passage, it will show in the {{{Add Tag}}} listbox. You can also assign a colour to the tag.
For Twee files, add the tag inside {{{[ ]}}} next to the passage name. For tags with multiple words, add a {{{-}}} between them ({{{[like-this]}}}) For multiple tags, add a space in between ({{{[nobr widget]}}}).

Adding a tag to a passage creates:
* a data-tag on {{{html}}}, {{{body}}}, and {{{.passage}}}
* a CSS class on {{{body}}} and {{{.passage}}}

Both the data-tag and class can be used in the Stylesheet to edit aspects of the page, but are coded differently. The data-tag will keep the formatting of the inserted tag (case-sensitive and punctuation), while the class will transform it into a lowercase string and without punctuation (save for {{{-}}}).
{{{
For a tag called: The-Name-Of-The-Tag:
    [data-tags~="The-Name-Of-The-Tag"]
    .the-name-of-the-tag

For a tag called: Super!
    [data-tags~="Super!"]
    .super
For a tag called: This-1
    [data-tags~="This-1"]
    .this-1
}}}
> ''Note:'' if you are unsure how a tag or class has been formatted, use the Inspect Tool of your browser and select the {{{<body>}}}.
\
As for positioning the data-tag or class on an element, you need to take into account the order of CSS rules and where the tags are located. For example:
{{{
    html[data-tags~="forest"] { background-image: url(forest-bg.jpg); }
→ will change the background to an image of a forest, because there is a data-tag on "html"

    html.forest { background-image: url(forest-bg.jpg); }
→ will not do anything, because there is no class on "html"

    html .forest { background-image: url(forest-bg.jpg); }
→ will add the image as a background to every element inside "html" with the class "forest"
}}}
> ''Note:'' it is recommended to be specific when targeting an element (so not like the last example), to avoid adding unnecessary rules to elements.
\
> ''Note:'' class can also be added to the {{{html}}} element, in the JavaScript passage, jQuery code or [[DOM Macros|Macro-DOM-Adv]].
\
> //Other examples://
{{{
→ Targeting a child element:
    html[data-tags~="forest"] .passage { color: darkgreen; }
        → will change the font colour of ".passage" if the passage is tagged "forest"
    body[data-tags~="forest"] a { color: green; }
        → will change the colour of every link inside "body"

→ Targeting an element without "body":
    [data-tags~="forest"] #ui-bar {background: red;}
    .forest #ui-bar {background: red;}
        → will change the background colour of the sidebar
}}}
> ''Note:'' Data-Tags are prefered over classes, because it is more stable (i.e. won't be messed up by custom macros or third party code).

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>

:: Tags-Asset [page] {"position":"2000,1400","size":"100,100"}
<h1>Including Assets with Tags</h1>
While you cannot import assets through the Twine app, it is possible with SugarCube to create //Media Passages// through a passage tag. The media embeded in your project, you can inclde those assets into other passages thanks to the {{{data-passage}}} [[attribute|Markup-Attribute]]. 
> ''Note:'' while it is meant for [[Base64-encoded|https://en.wikipedia.org/wiki/Data_URI_scheme]] media source {{{data:type/extension;format,code}}}, the passage will also accept URL.

These media passages will support audio, image, video, and VTT elements. Each of those get a special tag:
* {{{Twine.audio}}}, will register the passage as an audio passage
* {{{Twine.image}}}, will register the passage as an image passage
* {{{Twine.video}}}, will register the passage as a video passage. 
* {{{Twine.vtt}}}, will register the passage as a VTT passage.
> ''Note:'' you can only include one asset per passage. 
> In Twine 2, it is strongly recommended to only create a handful of media passage, and use small sources.

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>

:: SP-Variables [page] {"position":"2100,1400","size":"100,100"}
TODO: link
<h1>The Special Variables</h1>
SugarCube includes special variables, which can be used in the JavaScript passage or within the {{{<<script>>}}} macro.
\
<h3>The API Variables</h3>\
The different APIs included in SugarCube are defined as Special Variables:
* {{{Config}}} refers to the Configuration API
* {{{Dialog}}} refers to the Dialog API (popups)
* {{{Engine}}} refers to the Engine API 
* {{{Fullscreen}}} refers to the Fullscreen API
* {{{LoadScreen}}} refers to the LoadScreen API
* {{{Macro}}} refers to the Macro API
* {{{Passage}}} refers to the Passage API
* {{{Save}}} refers to the Save API
* {{{Setting}}} refers to the Setting API
* {{{SimpleAudio}}} refers to the SimpleAudio API
* {{{State}}} refers to the State API
* {{{Story}}} refers to the Story API
* {{{Template}}} refers to the Template API
* {{{UI}}} refers to the UI API
* {{{UIBar}}} refers to the UIBar API
\
<h3>Other Special Variables</h3>\
* {{{jQuery}}} will refer to the jQuery library function, with {{{$}}} being an alias 
** the alias should not be confused with story variables {{{$var}}}, which should be called via {{{State.variables}}} or {{{State.getVar()}}}
* {{{l10nStrings}}} refers to the Strings localization
* {{{settings}}} are player setting object, set through the Setting API 
* {{{setup}}} are objects used for static data

<div id="link-menu">[[Back to the Special Passages and Tags Menu|Special-Tags]] - [[Back to the Start Menu|Start]]</div>
/* TODO *?
