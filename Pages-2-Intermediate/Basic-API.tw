:: Basic-API [chapter menu] {"position":"3500,1100","size":"200,100"}
<h1>Some Useful Basic APIs</h1>
Along with macros, there are further APIs to trigger an event in the game, such as undoing an action, opening a popup, or configuring some functionalities in the engine. For more Basic APIs, see [[this page|API-Adv]].

Those APIs are JavaScript-based code that should either be included in the JavaScript or within the {{{<<run>>}}} or {{{<<script>>}}} macros to work.

* [[Moving back and forth in the History|Basic-API-Engine]]
* [[Create a PopUp|Basic-API-Dialog]] 
* [[Handle the SideBar|Basic-API-UIBar]]
* [[Open the Restart, Saves, and Settings PopUp|Basic-API-UI]] 
* [[Overriding the Navigation to a Passage|Basic-Config-Navig]]
* [[Some Useful Configuration API for your Project|Basic-API-Config]]

<div id="link-menu">[[Back to the Start Menu|Start]]</div>

:: Basic-API-Engine [page] {"position":"3500,1200","size":"100,100"}
<h1>Moving back and forth in the History</h1>
Moving back and forth in the Player's History is possible in the base SugarCube UI with the History buttons at the top of the SideBar. They are represented with the {{{←}}} and {{{→}}} arrows in the base styling. 

However, if those buttons are removed, through the [[Config API|Basic-API-Config]] or because the SideBar was removed (with {{{StoryInterface}}} or the [[UIBar API|Basic-API-UIBar]]), it is still possible for the player to undo/redo an action: with the {{{Engine.backward()}}} and {{{Engine.forward()}}}, nested inside a {{{<<link>>}}} or a {{{<<button>>}}}.
{{{
    <<run Engine.backward()>>
    <<script>>Engine.forward()<</script>>

Inside a link/button:
    <<link "Back">><<run Engine.backward()>><</link>>
    <<button "Forward">><<script>>Engine.forward()<</script>><</button>>
}}}

While this API can also be used without player interaction, by simply including the API in a non-interactive macro (e.g. {{{<<timed>>}}}), to automatically rewind/redo the action, I would not recommend it.

<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

:: Basic-API-Dialog [page] {"position":"3600,1200","size":"100,100"}
<h1>Create a PopUp</h1>
Instead of moving to another passage to show a bit of text to the player, the Dialog API is here to create <<link "PopUps">><<popup "Basic-UI-Dialog" "Dialog Box">><</link>>!
\
<h3>The Basics of Popups</h3>\
To create a popup, you will need 3 APIs, in this order:
* {{{Dialog.create()}}}, to prepare the popup, and add a title (optional) and a class (optional)
* {{{Dialog.wiki()}}}, to include text in the popup
* {{{Dialog.open()}}}, to open the dialog box
\
{{{
    Dialog.create('This a PopUp');
    Dialog.wiki("And here is the text. Even some //italics// and ''bold''!");
    Dialog.open();

    Dialog
        .create('This a PopUp')
        .wiki("And here is the text. Even some //italics// and ''bold''!")
        .open();
}}}
>'' Note:'' be mindful of quotes in {{{Dialog.wiki()}}}, as it could start issues.

For longer popups, you can use {{{Dialog.wikiPassage();}}} to pull the content of a separate passage. This is quite handy when you want to avoid messy code blocks, have a bit more control over the text (like line breaks), or when including interactive macros.
{{{
    Dialog.wikiPassage("PassageName");
}}}

If you need to empty the content of a popup before displaying something new, you can use {{{Dialog.empty();}}}:
{{{
    Dialog.empty();

 → in combination with a new wiki:
    Dialog
        .empty()
        .wikiPassage("AnotherPassage");     
}}}
\
<h3>Customise the Popup</h3>\
For {{{Dialog.create()}}} and {{{Dialog.open()}}}, it is possible to add parameters to customise a popup further. This can take multiple forms, from adding a CSS class to the whole popup, changing where the popup is positioned, or triggering a function when closing the popup.

The {{{Dialog.create()}}} has 2 parameters:
* {{{title}}} (optional): the title displayed for the popup
* {{{classNames}}} (optional): classes to attach to the popup, separated with a space
{{{
    Dialog.setup('This is a PopUp Title', 'a-class and-another-one');
}}}
> ''Note:'' you can target this class in the StyleSheet to change how the popup looks 

The {{{Dialog.open()}}} has also 2 parameters:
* {{{options}}} (optional) 
** namely {{{ {top: [value]} }}}, to affect the top margin of the popup.
* {{{closeFn}}} (option), the function to execute whenever the popup is closed
{{{
    Dialog.open({top : 500}, myFunction())
}}}

>'' Note:'' Chapel has created a [[Macro Set|https://github.com/ChapelR/custom-macros-for-sugarcube-2/blob/master/docs/dialog-api-macro-set.md]] to make the process of coding Popups easier. This macro is used in this guide.
\
<h3>{{{Dialog.close();}}}</h3>\
While the Dialog box has a built-in //Close// button in its top-right corner, or can be closed by clicking outside of the dialog box, there is a third way to make the popup disappear: {{{Dialog.close()}}}.
If the popup has interactive elements, especially some triggering more code (e.g. moving to a new passage), this API will automatically close the popup for the player.
{{{
    Dialog.close();

    <<button "Move Forward?">>
        <<if $ready is true>>
            <<goto "Forest">>
            <<run Dialog.close();>>
        <<else>>
            /* Some code :P */
        <</if>>
    <</button>>
}}}


<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

:: Basic-UI-Dialog [popup] {"position":"700,200","size":"100,100"}
You found the dialog box!

:: Basic-API-UIBar [page] {"position":"3500,1300","size":"100,100"}
<h1>Handle the SideBar</h1>
Thanks to the APIs below, you can control when/where the SideBar will appear on the page. These can be included directly on the passage (with either {{{<<run>>}}} or {{{<<script>>}}}), or in the JavaScript.

{{{UIBar.hide()}}} will hide the SideBar on the page, and stay hidden until {{{UIBar.show()}}} is triggered. Even if it won't appear on the page, the element {{{#ui-bar}}} will still be included in the HTML, but with a display value of {{{none}}} when hidden.

Similarly, {{{UIBar.stow()}}} will stow the SideBar to the side (but still visible), and stay stowed until {{{UIBar.unstow()}}} is triggered. The element {{{#ui-bar}}} will receive a special class {{{.stowed}}}, and transition from one state to another with a smooth animation.

{{{UIBar.destroy()}}}, on the other hand will remove the the element {{{#ui-bar}}} completely.
>'' Note:'' if {{{StoryInterface}}} is in use, and does not include the element {{{#ui-bar}}} within this Special Passage, there is no need to include this API.

<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

:: Basic-API-UI [page] {"position":"3600,1300","size":"100,100"}
<h1>Open the Restart, Saves, and Settings PopUp</h1>
The elements above are included in the base SugarCube UI, as buttons in the menu (if they are populated), but can be called at any time with the APIs below:
* {{{UI.restart()}}}, will open a popup asking the player if they would like to Restart the Game.
** To restart without a popup, you will want to use the [[Engine API|Engine-Restart]].
* {{{UI.saves()}}}, will open the Save popup.
* {{{UI.settings()}}}, will open the Settings popup.

Those APIs are most useful inside a {{{<<link>>}}} or {{{<<button>>}}} when:
* the UI of the project doesn't include the built-in SideBar 
* when the menu has been removed from the SideBar
* in a Starting Menu Passage or an Ending Passage

<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

:: Basic-Config-Navig [page] {"position":"3500,1400","size":"100,100"}
<h1>Overriding the Navigation to a Passage</h1>
While moving from passage to passage is dictated by the Passage Name inside a link or in a {{{<<goto>>}}} macro, it is still possible to override the original destination, sending the player to a new passage. This can be done with {{{Config.navigation.override}}}:
{{{
    Config.navigation.override = function (dest) {
	    /* code */
    };
}}}
>'' Note:'' this requires a bit of JavaScript knowledge to fill in the Config (or edit the example below).

Assuming that you want to send the player to an End Screen ({{{"You Died"}}}) because their {{{$health}}} is too low (0 or less):
{{{
    Config.navigation.override = function (dest) {
        var sv = State.variables;
        if (sv.health <= 0) {
            return "You Died";
        }
    };
}}}
>'' Note:'' {{{State.variables}}} is how to code a variable (here {{{$health}}}) in JavaScript that was set in a SugarCube passage.

If there are multiple situations where the player should be sent to a special passage:
{{{
    Config.navigation.override = function (dest) {
        var sv = State.variables;
        if (sv.health <= 0) {
            return "You Died";
        }
        else if (sv.coins = 0) {
            return "You Poor";
        }
    };
}}}

''An important Note:'' if there is a link to a different passage in the End Screen and the variable still has a value that would run the code above, the Navigation will be overriden again when that link is clicked. You can avoid this by:
* change the value of the variable 
* unset the variable 
* remove any link that would move the player to a new passage
\
<h3>A non-JavaScript Alternative</h3>\
While the method above is prefered, this navigation override is also possible to do in SugarCube code, inside the {{{PassageReady}}} with a couple of conditional statements and {{{<<goto>>}}} macros:
{{{
    ::PassageReady
    <<if !$ending>>
        <<if $health <= 0>>
            <<set $ending to true>>
            <<goto "You Died">>
        <<elseif $coins = 0>>
            <<set $ending to true>>
            <<goto "You Poor">>
        <</if>>
    <</if>>
}}}
Since this runs before the passage is [[fully rendered|SP-PassageReady-Done]], it is important that the {{{$ending}}} variable is included here, and set as true before the {{{<<goto>>}}} macro, otherwise the player will run into an endless loop of reloading the ending passage.

<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

:: Basic-API-Config [page] {"position":"3600,1400","size":"100,100"}
<h1>Some Useful Configuration API for your Project</h1>
To customise your project further, here are a few Config APIs you might find useful.
\
<h3>Remove the History Buttons</h3>\
To force players to move forwards, it is possible to remove the //Forward// and //Backwards// buttons at the top of the SideBar, with the following code in the JavaScript:
{{{
    Config.history.controls = false;
}}}
>'' Note:'' this is only useful if the Base UI is in use or the element {{{#ui-bar-history}}} appears on the page. If the UIBar has been removed from editing the {{{StoryInterface}}}, you will not need this API.
> When removing these controls, you may want to give the player ways to go backward and forward in the story (especially relevant if you have codexes).
\
<h3>Change the Max Amount of States</h3>\
To avoid the player rewinding too much, you change the maximum number of state the history can save. These are active passages visited the player can go back to by pressing the //Backwards// button. If the player has visited more passage than the limit, the earlier visited states are moved to an "Expired" state, and won't be available to go back to with the back arrow or {{{Engine.backward()}}}.
{{{
    Config.history.maxStates = 40; //(default)
    Config.history.maxStates = 1; //(will not allow player to go backward)
}}}
>'' Note:'' the larger the {{{maxStates}}}, the bigger the chance of lag when loading new passages.
\
<h3>Change the Number of Save Slots</h3>\
->  Config.saves.maxSlotSaves
With a default of 8 save slots (+ autosave and export), players have many opportunities to save a play through. Still, the number of save slots can be modified:
{{{
    Config.saves.slots = 4;
}}}
>'' Note:'' the higher the number, the more the game will save in the player's cache. 
> For more Save Config, see [[this page|Config-Saves]].
\
<h3>Removing Unwanted Blank Space</h3>\
Aside from using the {{{<<nobr>>}}} macro or {{{nobr}}} tag, there are two Config APIs which will remove the unnecessary blank space in your project: {{{Config.cleanupWikifierOutput}}} and {{{Config.passages.nobr}}}.

{{{Config.cleanupWikifierOutput}}} will remove any line breaks ({{{<br>}}}) created during compiling, as well as wrap any non {{{<div>}}} elements with {{{<p>}}}, creating paragraphs.

On the other hand, {{{Config.passages.nobr}}} will only remove any break on the page. This means that you will need to wrap every paragraph or bit of text with a block HTML makrup (i.e. {{{<p>}}}, {{{<div>}}}, {{{<h1>}}}, etc...) manually.
{{{
    Config.cleanupWikifierOutput = true;
    Config.passages.nobr = true;
}}}
>'' Note:'' if both are included, no matter the order, {{{Config.passages.nobr}}} will remove all breaks on the page. 
> As well, if the {{{nobr}}} tag is used in a passage, it too will override {{{Config.cleanupWikifierOutput}}}

<div id="link-menu">[[Back to the Basic API Menu|Basic-API]] - [[Back to the Start Menu|Start]]</div>

