:: DebugAPI [page chapter]
<h1>Testing and Debugging your Game</h1>\
Testing is an important part of game creation, as it will ensure players will not run into issues and bugs during their experiences. For this, SugarCube includes a "Debug Mode".

The debugging feature is native to the Twine program, as you can both //Test// the whole project or //Test From Here// (one specific passage). This will display the Debug Bar in the bottom right corner of the page, which allows you to track passages seen and variable changes, as well as display coding markup (i.e. macros, TwineScript markup, etc...) and give extra information about those markup (hover).
> ''Note:'' with Tweego, you will need to add some extra characters in your compiling command ({{{-t}}} or {{{--test}}}).

However, if you require testing outside of the Twine environment (e.g. external beta-testing) or run some code only when this Debug Mode is active, you will need the following APIs.

<h3>{{{Config.enableOptionalDebugging}}}</h3>
As of SugarCube 2.37, the {{{<<if>>}}} macro will not display an error when the {{{ = }}} operator is used by default, and run the code erronously (as in pick the condition when it shouldn't). While the players won't see the error warning, it may lead to issues for their playthroughs.

As such, during testing, especially with external beta-tester, it is recommended to enable this API, to display the errors.
{{{
    Config.enableOptionalDebugging = true;
}}}
> ''Note:'' It is possible this API would expand in the future, and include further errors to be suppressed when not enabled.
\
<h3>{{{Config.debug}}}</h3>\
This API can be used to both enable Debug Mode for testing outside of Twine, and run special code only when the Debug Mode is enabled. 
> //Enabling Debug Mode://
{{{
    Config.debug = true;
}}}
> //Other Examples of use://
{{{
→ Pure JavaScript
    if (Config.debug) {
        console.log('OH NO! AN ERROR WITH THIS!!');
	    /* or any other code debug related */
    }

→ TwineScript
    <<if Config.debug>>
        <<run console.log('OH NO! AN ERROR WITH THIS!!');>>
        /* OR */
        <<print `passage()`>>
    <</if>>
}}}
This way is particularly useful for ongoing projects requiring testing and release at multiple stage, as you can keep the code between releases without the need to delete it, since the code will become invisible outside of the Debug Mode.

THIS SHOULD BE ITS OWN CHAPTER
> ''Note:'' You can enable {{{Config.debug}}} for testing purposes without the Debug Mode being visible to beta testers
TODO -> it's removing it in the CSS