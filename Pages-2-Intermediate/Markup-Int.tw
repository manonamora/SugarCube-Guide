:: Markup-Int [chapter menu] {"position":"800,1100","size":"200,100"}
<h1>More SugarCube Markup</h1>
While [[Markup]] can help format text on the screen, display an image or create a link, it can also be useful in affecting HTML elements on the page (like updating stats bars), or display small variation (like changing pronouns). And, if you are trying to make a guide or tutorials in SugarCube, it will help display code!

* [[Special Attributes and Directives|Markup-Attribute]] 
* [[Displaying Code and Verbatim Text|Markup-Code-Verbatim]] 
* [[Display Small Variation with Templates|Markup-Template]] 

:: Markup-Attribute [page int-markup] {"position":"800,1200","size":"100,100"}
<h1 id="int-muattri">Special Attributes and Directives</h1>
Macros are not the only way to interact with elements on the page and affect their aspects. You link up a variable or passage with an HTML element with a few extra characters, and enable special behaviours unattainable with built-in macros.
\
<h3>Special Attributes</h3>\
HTML attributes are additional information added on to an element or enable special behaviours, such as the source of an image ({{{src="URL"}}}), alternative text ({{{alt="text"}}}) and even styling ({{{style="some CSS"}}}). To this, SugarCube adds two extra attributes: {{{data-passage}}} and {{{data-setter}}}. The latter will set a variable (like {{{<<set>>}}}), while the former is dependent on the element attached.
\
<h4>{{{data-setter}}}</h4>\
To function, the {{{data-setter}}} attribute should be added to interactive elements like a link ({{{<a>}}}), a button ({{{<button>}}}) or an area inside a clickable image ({{{<area>}}}). It will save any wanted value to the indicated SugarCube variable:
{{{
    data-setter="$var to 'value'"
}}}
> ''Note:'' be mindful when using quotes/apostrophes, or the attribute will not work!
{{{
    <a data-passage="Passage" data-setter="$checked to true">Check the Room</a>

    <button data-passage="Passage" data-setter="$thing to 'done'">Do the thing</button>

    <area shape="rect" coords="25,25,75,75" data-passage="Passage"
	data-setter="$treasure to 'empty'">
}}}
\
<h4>{{{data-passage}}}</h4>\
The {{{data-passage}}} will connect a passage to the selected element, creating either a link between passages (like a {{{<<link>>}}}), displaying images or videos, or playing audio. 
    
Using {{{data-passage}}} to create a link between passages can be used for elements such as a link ({{{<a>}}}), a button ({{{<button>}}}) or an area inside a clickable image ({{{<area>}}}). It is most useful for map images, or other custom elements.
{{{
    <a data-passage="PassageName">Do the thing</a>

    <button data-passage="PassageName">Do the thing</button>

    <area shape="rect" coords="25,25,75,75" data-passage="PassageName">
}}}
> ''Note:'' This method will not create an arrow between passages on the Twine map.

As for multi-media elements, such as {{{<audio>}}}, {{{<img>}}}, {{{<source>}}} or {{{<video>}}}, {{{data-passage}}} will become the link between the element and the asset to use in the passage. These can be helpful when wanting to include external online assets.
> ''Note:'' this should be used in combination with the [[Asset Passage Tags|Tags-Asset]]
{{{
    <audio data-passage="AudioPassageName">

    <img data-passage="ImagePassageName">

    <source data-passage="AudioOrVideoPassageName">

    <video data-passage="VideoPassageName">
}}}
> ''Note:'' {{{data-passage}}} can also be used in the {{{StoryInterface}}} [[Special Passage|SP-StoryInterface]].
\
<h3>Attribute Directive</h3>\
SugarCube also allows variables to affect elements and their attribute, changing how they are styled or how they behave. This is done through an ''attribute directive'', which will connect a variable to the wanted attribute. This method can be used for any attribute of an element, except for {{{data-setter}}}.

The //attribute directive// is particularly useful when wanting to use HTML interactive element not included in SugarCube (see [[HTML forms|https://developer.mozilla.org/en-US/docs/Web/HTML/Element#forms]]), creating stat bars without diving into JavaScript code, or formatting an element depending on the state of the game.

The directives can be coded two ways: {{{sc-eval:}}} or {{{@}}} before the relevant attribute. The latter is the easiest form to use.
Assuming that {{{_id = "foo"}}}:
{{{
    <span sc-eval:id="_id">…</span>
    <span @id="_id">…</span>

→ will work the same as:
    <span id="foo">…</span>
}}}
Assuming that {{{$stat = 45}}}
{{{
    <progress @value="$stat" max="100"></progress>
→ will display a simple stats bar
}}}
> ''Note:'' For examples of stats bar, see [[this page|Int-JS-CSS-Stat]].

:: Markup-Code-Verbatim [page int-markup] {"position":"900,1200","size":"100,100"}
<h1 id="int-mucode">Displaying Code and Verbatim Text</h1>
This section won't be useful for almost all game projects, as it involves displaying code or text without formatting. However, if your Twine project is meant to be a guide, a tutorial, or other resources requiring the display of code, the markups below will prove quite useful.
> ''Note:'' I've been using it for all code examples in this guide.

There are two forms you can use: the Code Markup, with triple curvy brackets {{{ { } }}}, or the Verbatim Markup with triple quotes {{{ " " }}}. The difference between the markups will be on how it is translated into HTML.

The Code Markup will take two forms: an in-line one (HTML: {{{<code></code>}}}) and a block one (HTML: {{{<pre><code></code></pre>}}}). This guide has displayed both form with the different coloured blocks elements when showcasing code examples. In this guide, I've used the in-line form for code in-text, and the block for examples (like below).
> //In-Line Code//:
{{{
    {{{<<set $var to true>>}}}

→ will be rendered as:

    <code><<set $var to true>></code>
}}}
> //Block Code//:
{{{
    {{{
        <<set $var to true>>
    }}}

→ will be rendered as:

    <pre><code><<set $var to true>></code></pre>
}}}
> ''Note:'' there ''cannot'' be any space after the opening bracket or before the closing bracket. Otherwise the code will transform into an //in-line//. 

The Verbatim Markup will require triple quotes {{{ " " }}} (HTML: {{{<nowiki></nowiki>}}})
{{{
    """No //format//"""

→ will be rendered as:

    <nowiki>No //format//</nowiki>
}}}

:: Markup-Template [page int-markup] {"position":"800,1300","size":"100,100"}
<h1 id="int-mutemp">Display Small Variation with Templates</h1>
The Template markup is essentially a text replacement code that will display small variation (one-two words). It works in combination with the [[Template API|TemplateAPI]], where the variation is defined. It is most useful for displaying pronouns, especially pronoun sets defined before player input.
> ''Note:'' For an example of Pronoun Template, see [[Chapel's Macro|https://github.com/ChapelR/custom-macros-for-sugarcube-2/blob/master/docs/pronoun-templates.md]] or [[HiEv's Widget|https://hiev-heavy-ind.com/Sample_Code/Sample_Code.html#Pronoun%20Templates]]. 

The markup is set with a question mark {{{?}}} before the defined template name ({{{?this}}}). If a Template has been defined in JavaScript, the code will look for any template markup on the page, and display the relevant element on the screen.
> ''Note:'' if the API is not set or the element is not defined in the Template, the markup will display the text as is, like {{{?this}}.}

Assuming that the template sets {{{?He}}} into //She// and {{{?his}}} into //her://
{{{
    ?He was always willing to lend ?his ear to anyone.
→ will be rendered into:
    She was always willing to lend her ear to anyone.
}}}
