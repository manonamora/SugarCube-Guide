:: Markup-Int [chapter menu] {"position":"800,1100","size":"200,100"}
<h1>More SugarCube Markup</h1>
While [[Markup]] can help format text on the screen, display an image or create a link, it can also be useful in affecting HTML elements on the page (like stats bars), or display small variation (like pronouns).

* [[Special Attributes and Directives|Markup-Attribute]] 
* [[Displaying Code and Verbatim Text|Markup-Code-Verbatim]] 
* [[Display Small Variation with Templates|Markup-Template]] 

<div id="link-menu">[[Back to the Start Menu|Start]]</div>

:: Markup-Attribute [page] {"position":"800,1200","size":"100,100"}
<h1>Special Attributes and Directives</h1>
While macros allow for interaction or affect elements on the page, it is also possible to link variables or passages directly to HTML elements, and enable special behaviour unatainable with built-in macros.
\
<h3>Special Attributes</h3>\
SugarCube provides some special HTML attributes to enable special behaviour from HTML elements. There are two main ones: {{{data-passage}}} and {{{data-setter}}}. While the latter will set a variable to a value (like {{{<<set>>}}}), the former will behave differently depending on the element (i.e. create a link towards a passage or display the content of the passage).
\
<h4>{{{data-setter}}}</h4>\
The {{{data-setter}}} attribute can be added to interactive elements like a link ({{{<a>}}}), a button ({{{<button>}}}) or an area inside a clickable image ({{{<area>}}}). It will set any SugarCube variable to a wanted value:
{{{
    data-setter="$var to 'value'"
}}}
> ''Note:'' be mindful when using quotes/apostrophes, or the attribute will not work!
{{{
    <a data-passage="Passage" data-setter="$checked to true">Check the Room</a>

    <button data-passage="Passage" data-setter="$thing to 'done'">Do the thing</button>

    <area shape="rect" coords="25,25,75,75" data-passage="Passage"
	data-setter="$treasure to 'empty'">
}}}
\
<h4>{{{data-passage}}}</h4>\
The {{{data-passage}}} will link a passage to an element, creating either a link between passages (like a {{{<<link>>}}}), displaying images or videos, or playing audio. 
    
Using {{{data-passage}}} to create a link between passages can be used for elements such as a link ({{{<a>}}}), a button ({{{<button>}}}) or an area inside a clickable image ({{{<area>}}}). It is most useful for map images, or custom elements to hide a link.
{{{
    <a data-passage="PassageName">Do the thing</a>

    <button data-passage="PassageName">Do the thing</button>

    <area shape="rect" coords="25,25,75,75" data-passage="PassageName">
}}}
> ''Note:'' This method will not create an arrow between passages on the Twine app.

As for multi-media elements, such as {{{<audio>}}}, {{{<img>}}}, {{{<source>}}} or {{{<video>}}}, {{{data-passage}}} will become the link between the element and the asset to use in the passage. These can be helpful when wanting to include external online assets.
> ''Note:'' this should be used in combination with the [[Asset Passage Tags|Tags-Asset]]
{{{
    <audio data-passage="AudioPassageName">

    <img data-passage="ImagePassageName">

    <source data-passage="AudioOrVideoPassageName">

    <video data-passage="VideoPassageName">
}}}
\
<h3>Attribute Directive</h3>\
SugarCube also allows variables to affect the class or id of an element, how they are styled, or even how they behave. It can be used for any attribute of an element, except for {{{data-setter}}}.

It is particularly useful when wanting to use HTML interactive element not included in SugarCube (e.g. slider in passage), creating stat bars without diving into JavaScript code, or formatting an element depending on the state of the game.

The directives can be coded two ways: {{{sc-eval:}}} or {{{@}}} before the relevant attribute.
Assuming that {{{_id = "foo"}}}:
{{{
    <span sc-eval:id="_id">…</span>
    <span @id="_id">…</span>

→ will work the same as:
    <span id="foo">…</span>
}}}
Assuming that {{{$stat = 45}}}
{{{
    <progress @value="$stat" max="100"></progress>
→ will display a simple stats bar
}}}

<div id="link-menu">[[Back to the Markup Menu|Markup-Int]] - [[Back to the Start Menu|Start]]</div>


:: Markup-Code-Verbatim [page] {"position":"900,1200","size":"100,100"}
<h1>Displaying Code and Verbatim Text</h1>
This page might not be the most useful for game projects, as it involve displaying code or text without formatting. However, for projects like this guide, the markup below will prove quite helpful.

To do so, you can follow the Code Markup, with triple curvy brakets {{{ { } }}}, or the Verbatim Markup with triple quotes {{{ " " }}}. The difference between the markups will be on how it is translated into HTML.

The Code Markup will take two forms: an in-line one (HTML: {{{<code></code>}}}) and a block one (HTML: {{{<pre><code></code></pre>}}}). This guide has displayed both form with the different coloured blocks elements when showcasing code examples.
> //In-Line Code//:
{{{
    {{{<<set $var to true>>}}}

→ will be rended into:

    <code><<set $var to true>></code>
}}}
> //Block Code//:
{{{
    {{{
        <<set $var to true>>
    }}}

→ will be rended into:

    <pre><code><<set $var to true>></code></pre>
}}}
> ''Note:'' there should not be any space after the opening bracket or before the closing bracket. Othewise the code will be displayed as //in-line//. 

The Verbatim Markup will require triple quotes {{{ " " }}} (HTML: {{{<nowiki></nowiki>}}})
{{{
    """No //format//"""

→ will be rended into:
    <nowiki>No //format//</nowiki>
}}}

<div id="link-menu">[[Back to the Markup Menu|Markup-Int]] - [[Back to the Start Menu|Start]]</div>

:: Markup-Template [page] {"position":"800,1300","size":"100,100"}
<h1>Display Small Variation with Templates</h1>
The Template makrup is essentially a text replacement code that will display small variation (usually of one word). It works in combination with the [[Template API|TemplateAPI]], where the variation is defined. It is most useful for displaying pronouns, especially pronoun sets defined before player input.
> ''Note:'' For an example of Pronoun Template, see [[Chapel's Macro|https://github.com/ChapelR/custom-macros-for-sugarcube-2/blob/master/docs/pronoun-templates.md]] or [[HiEv's Widget|https://hiev-heavy-ind.com/Sample_Code/Sample_Code.html#Pronoun%20Templates]]. 

The markup is set with a question mark {{{?}}} before the defined template name ({{{?this}}}). If a Template has been defined in JavaScript, the code will look for any template markup on the page, and display the relevant element on the screen.
> ''Note:'' if the API is not set or the element is not defined in the Template, the markup will display the text as is, like {{{?this}}.}

Assuming that the template sets {{{?He}}} into //She// and {{{?his}}} into //her://
{{{
    ?He was always willing to lend ?his ear to anyone.
→ will be rended into:
    She was always willing to lend her ear to anyone.
}}}

<div id="link-menu">[[Back to the Markup Menu|Markup-Int]] - [[Back to the Start Menu|Start]]</div>

