:: Macro-Interact-Adv [chapter menu] {"position":"1400,1100","size":"200,100"}
<h1>More Interactivity Macros</h1>
While a previous section touched upon the [[Base Interactive Macros|Macro-Interact]], SugarCube still has more interactive macros, of a more intermediate use level. These macros will add different kinds of interactivity to the project, or more flexibility in said interactivity.

* [[Delaying Displaying Text or Running Code|Macro-Timed]]
* [[Displaying Text Letter by Letter|Macro-Type]] 
* [[DOM Macros and Revealing Text in Targeted Spots|Macro-ApPreRepCopy]] 
* [[Using Custom Macro|Custom-Macro]]

:: Macro-ApPreRepCopy [page int-macro] {"position":"1400,1200","size":"100,100"}
<h1 id="int-madom">DOM Macros and Revealing Text in Targeted Spots</h1>
DOM (Document Object Model) Macros target HTML elements on a page and affect the displayed content of that element. Those macros have the same functionality as the {{{<<link[insert-DOM]>>}}} [[macros|Macro-Link-AppPreRep]], but have more flexibility and do not require a link to work.
> ''Note:'' refreshing the page (F5 or returning) will undo any changes made by the macros.

There are four main macros and one extra:
* {{{<<append>>}}}, which will add content after the targeted element. 
* {{{<<prepend>>}}}, which will add content before the targeted element.
* {{{<<replace>>}}}, which will replace the content of the targeted element.
* {{{<<remove>>}}}, which will remove the targeted element.
* {{{<<copy>>}}}, which will copy the content of the targeted element.
\
The macros have each argument:
* the element to target: which can be an {{{#id}}}, a {{{.class}}} or an HTML {{{element}}}, or a combination.
> ''Note:'' if you are targeting an element that is on the page multiple time, the macro will affect all these elements.
\
{{{
	<<append "#chocolate">>
		This text will append the element with the ID "chocolate".
		It will appear after the content inside that element.
	<</append>>
	
	<<prepend h1>>
		This text will prepend every h1 element.
		It will appear before the content inside that element.
	<</prepend>>
	
	<<replace ".dog">>
		This text will replace the content of 
		the element with the Class "dog".
	<</replace>>
	
	<<remove p.test>> 
→ will remove the element <p class="test"> from the page
	
	<<copy span#sweet>> 
→ will copy the content of the element <span id="sweet">
}}}
> ''Notes:'' if the element you are trying to target is //not// on the page, you will get an error.
> If you want to empty an element, it is best to use an empty {{{<<replace>>}}} than a {{{<<remove>>}}}.
\
<h3>Transition or no transition</h3>\
Like with their {{{<<link[insert-DOM]>>}}} counterparts, {{{<<append>>}}}, {{{<<prepend>>}}} and {{{<<replace>>}}} have an optional extra argument:
* {{{t8n}}} or {{{transition}}} (optional) whether to show the new text with a transition.
{{{
	<<append "#chocolate" t8n>>
		This text will append the element with the ID "chocolate".
		It will do so with a transition.
	<</append>>
}}}
<span id="coco">This is a sentence.</span>
	<<link "Replace as is">><<replace "#coco">>This replaces the element without a transition.<</replace>><</link>> | <<link "Replace with transition">><<replace "#coco" t8n>>This replaces the element with a transition.<</replace>><</link>>
\
<h3>In combination with other macros</h3>\
The DOM macros are best used in combination with other interactive elements, like {{{<<link>>}}}, {{{<<button>>}}}, or even the {{{<<timed>>}}} [[macro|Macro-Timed]]. Here are some examples:
<span id="dog">The dog is barking</span>.
	<<link "Throw a ball">><<append "#dog">> at the ball<</append>><</link>>
{{{
	<span id="dog">The dog is barking</span>.
	<<link "Throw a ball">><<append "#dog">> at the ball<</append>><</link>>
}}}
> //Replacing a list of links with more text://
{{{
	<span id="choices">
		<<link "Go Home">>
			<<replace "#choices">>
				You went home. Nothing much happened.
				[[Next|Next Day]] 
			<</replace>>
		<</link>>
		<<link "Go to the Cinema">>
			<<replace "#choices">>
				You went to the Cinema, and met Charlie after the movie ended.
				[[Next|Convo Charlie]] 
			<</replace>>
		<</link>>
	</span>
}}}
> //Copying and Pasting://
{{{
	This is a <span class="one">terrible</span> idea!
	Well, I think this is <span class="two">a grand idea!</span>

	<<link "Or is it?">>
		<<replace ".two">>actually a <<copy ".one">> one as well...<</replace>>
	<</link>>
}}}
\
<h3>An Important note on DOM Macros</h3>\
Since the macros require the targeted element to be on the page, they ''cannot'' be coded as is on the page, due to how the [[page renders|SP-PassageReady-Done]]. As such, you will need either to:
* use the {{{<<link>>}}} or {{{<<button>>}}} macro, letting the player interact with the element,
* use the {{{<<done>>}}} [[macro|Macro-Done]], which will trigger when the page is fully rendered,
* use the {{{<<timed>>}}} [[macro|Macro-Timed]], which will delay the trigger long after the page is rendered,
** if you are planning on doing {{{<<timed 0s>>}}}, just use {{{<<done>>}}} instead
* code it inside the {{{PassageDone}}} [[special passage|SP-PassageReady-Done]] (same as the {{{<<done>>}}} macro, but will trigger with every new passage).
> ''Note:'' an alternative to the {{{<<replace>>}}} macro can be found in the {{{<<do/redo>>}}} [[macro set|Macro-Do-Redo]].

:: Macro-Timed [page int-macro] {"position":"1400,1300","size":"100,100"}
<h1 id="int-timed">Delaying Displaying Text or Running Code</h1>
If you need to delay the display of text or the trigger of code, after the passage is completely loaded, you should use the {{{<<timed>>}}} macro. As its name suggests, the macro will run a timer before doing whatever was coded inside.

<<timed 4s>>//Whoop, there it is!//<</timed>>
The macro has 2 arguments for its container, and 1 for the submacro:
* {{{<<timed>>}}}:
** the delay before the macro triggers, can be indicated in seconds or milliseconds.
*** the minimum recommended delay is 40ms.
** {{{t8n}}}/{{{transition}}}, whether the text appearing does so like the transition between passages.
* {{{<<next>>}}}:
** (optional) the delay before the next part of the macro triggers, can be indicated in seconds or milliseconds.
*** the minimum recommended delay is 40ms.
*** if not indicated, it will take the delay from the {{{<<timed>>}}} macro.
\
{{{
	<<timed 2s t8b>>
		This will appear with a transition after 2 seconds.
	<<next>>
		And this will appear 2 seconds after the previous text.
	<<next 4s>>
		While this will appear 4 seconds after the previous block.
	<</timed>>
}}}

Aside from displaying text, you can use the {{{<<timed>>}}} macro to trigger code:
{{{
→ sending the player to another passage:
	<<timed 10s>><<goto "END">><</timed>>

→ replacing some text on the page:
	Can I by some <span id="text">eggs</span>?
	<<timed 2s>><<replace "#text">>milk<</replace>><</timed>>
}}}
\
> ''Note:'' When using this macro, it is important to test the passage ''extensively'', to ensure it works as intended.
> To players, timers will often feel longer than indicated.

:: Macro-Type [page int-macro] {"position":"1500,1200","size":"100,100"}
<h1 id="int-type">Displaying Text Letter by Letter</h1>
Whether wanting to emulate a computer monitor or a typewriter, displaying a text letter by letter, the {{{<<type>>}}} macro will do the job!

<<type 80ms>>Here is the macro in action! It can also do [[links|Macro-Type]] and ''formatting''...<</type>>
\
The macro has 8 arguments:
* {{{speed}}}: the amount of time between each letter, can be indicated in seconds or milliseconds.
** 20-60ms is a good printing rate. 0s will show the whole text without animation.
* {{{start}}} (optional): adding a delay before the typing starts, indicated in seconds or milliseconds
** if only {{{start}}} is indicated, the default will be 400ms.
* {{{class}}} (optional): will assign an extra CSS {{{.class}}} to the typing container.
* {{{id}}} (optional): will assign a CSS {{{#id}}} to the typing container.
* {{{element}}} (optional): will transform the container from a {{{<div>}}} to another HTML element.
* {{{keep}}} (optional): will keep the cursor even after the typing is complete.
* {{{none}}} (optional): will not use the cursor during typing.
* {{{skipkey}}} (optional): when the key is pressed, the typing will display the whole text immediately.
** If only {{{skipkey}}}, the default value must be indicated with the {{{Config.macros.typeSkipKey}}} [[API|Confic-Macro]].
\
{{{
	<<type 40ms>>I ate an apple.<</type>>
→ The base required, with characters showing every 40 milliseconds.

	<<type 40ms start 2s none>>Oh no, I'm late...<</type>>
→ After a 2-second delay, this will show characters every 40 milliseconds, without the cursor.

	<<type 40ms class "menu">>[[Start Now!]]<</type>>
→ This will type the characters of the link every 40 milliseconds, and add the class '.menu' to the container.

	<<type 40ms element "span" keep>>Now I'm a span!<</type>>
→ Instead of the base container, this will be a '<span>'. When all text is displayed, the cursor will stay on the page.

	<<type 40ms id "words" skipkey "Enter">>Last one!<</type>>
→ This will type the characters every 40 milliseconds, unless the key 'Enter' is pressed to display everything at once. The container will also get the id '#words' added to it.
}}}
\
<h3>Order of triggers</h3>\
You can have as many iteration of {{{<<type>>}}} inside one passage, thought they will trigger only one after the other.
If you nest a {{{<<type>>}}} macro inside another one, the nested {{{<<type>>}}} will only start ''after all non-nested'' iteration have been completed.
{{{
	<<type 40ms>>First.
		<<type 40ms>>Fourth.
			<<type 40ms>>Sixth.<</type>>
		<</type>>
	<</type>>
	<<type 40ms>>Second.<</type>>
	<<type 40ms>>Third.
		<<type 40ms>>Fifth.<</type>>
	<</type>>
}}}
> ''Note:'' Because the macro is time dependant, it is important to test the passages extensively, to ensure it works as wanted.
> Typed text will often seem much slower to players than expected.
\
<h3>Customising the typed text with CSS</h3>\
While the typed text does not have default styling (aside from the cursor), the macro includes special classes you can target and edit:
* {{{.macro-type}}}, to change the base styling of the macro (e.g. colour, font...)
* {{{.macro-type-done}}}, to change the styling when all iterations of the macro are complete
* {{{.macro-type-cursor:after}}}, to edit the cursor
{{{
	.macro-type {
		color: limegreen;
		font-family: monospace, monospace;
	}
	.macro-type-cursor:after {
		color: limegreen;
		content: "\269C\FE0F"; /* Fleur-de-lis emoji */
		font-family: monospace, monospace;
	}
}}}

> ''Note:'' for even more advanced customisation of the macro, you can also add custom JavaScript code with the [[Typing Events|Events-Type]].

:: Custom-Macro [page int-macro] {"position":"1500,1300","size":"100,100"}
<h1 id="int-custommacro">Using Custom Macro</h1>
Aside from the built-in macros, there are many custom ones created by other SugarCube users, from official [[add-ons|http://www.motoslave.net/sugarcube/2/]] on the SugarCube page, to code repositories (mainly on GitHub - see <<link "Credits">><<popup "Credits" "Credits">><</link>>). These custom macros will almost always have their own documentation, with examples or guides on how to use them.

As they are not included with SugarCube, you will need to "install" the custom macro by copy-pasting the relevant code into the JavaScript tab, the StyleSheet tab, or inside a [[Widget Passage|Macro-Widget]]. Not including the required code inside the project (and in the correct place) will trigger errors on the page.

> ''Note:'' when using multiple macros, it is important to check that ''no two macros have the same name''. Otherwise, it will create issues when loading the game (a.k.a. either only one or none of them will work).
\
<h3>Creating your own Macro</h3>\
If you need a custom macro for your project, because it cannot be done with base SugarCube or with the {{{<<script>>}}} [[macro|Macro-Script-Run]], and you have enough knowledge of JavaScript and jQuery, you could attempt to create your own Macro.
> ''Note:'' this option should be for very advanced users with JavaScript knowledge. Many game functionalities do not require a custom macro, or may have already been created by someone. See the [[Twine Resource Masterlist|https://intfiction.org/t/twine-resource-masterlist-wiki/65903]] for a non-exhaustive list of macro creators.

To do so, you will need to use the [[Macro API|Macro]] and code away!
The most important things to remember will be to:
* ensure the name of the macro is different to the Base SugarCube macros (or other custom ones you may be using)
* test it extensively 
