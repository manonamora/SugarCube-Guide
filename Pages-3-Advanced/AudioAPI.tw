:: AudioAPI [page chapter]
<h1>Going Further with Audio with APIs</h1>

The Audio API is the largest group of APIs included in SugarCube, enabling you to have more control over sound in your project. It is the subsystem and backend for the [[audio macros]].
> ''Note:'' this chapter is for pretty advanced users. It is unlikely they will be of use for 99% of projects, as the audio macros will already cover most use.

Because the SugarCube Audio system is based on the HTML Media Elements APIs, it comes with limitations:
* no true gapless transitions between tracks
* on mobile, playback volume is controlled ONLY by the device hardware (except for muting)
* playback at the start of the game must be initiated by player through a click/touch (it won't work otherwise)

* [[|AudioAPI-General]]

:: AudioAPI-General [page]
<h1> TITLE </h1> SIMPLE AUDIO API 

<h3>General SimpleAudio APIs</h3>\
<h4>{{{SimpleAudio.load()}}} and {{{SimpleAudio.loadWithScreen()}}}</h4>\
These APIs are used to load tracks up to playable state, anytime it is called, with the latter adding a loading screen untill all tracks are loaded (or aborts due to errors).
> ''Note:'' these APIs should not be abused, as it forces players to download the tracks if they are sourced on the network.
{{{
    SimpleAudio.load();
    SimpleAudio.loadWithScreen();
}}}
\
<h4>{{{SimpleAudio.mute()}}} and {{{SimpleAudio.muteOnHidden()}}}</h4>\
The general logic of the APIs is to (un)mute the master volume for the game, with {{{SimpleAudio.muteOnHidden()}}} going further as it will mute/unmute depending on the visibility of the page (i.e. //is the browser page in focus?//). You can also use those API as a variable to check whether the master volume is muted or not.
{{{
    SimpleAudio.mute([state])
    SimpleAudio.muteOnHidden([state])
}}}
It has 1 parameter: 
* {{{state}}} (optional, boolean), whether the game is/should be muted or not 
\
> ''Note:''  
{{{
 → as a variable:
    var isMuted = SimpleAudio.mute();
    var isMuteOnHidden = SimpleAudio.muteOnHidden();

 → Mute (master volume)
    SimpleAudio.mute(true);
    SimpleAudio.muteOnHidden(true);

 → Unmute (master volume)
    SimpleAudio.mute(false);
    SimpleAudio.muteOnHidden(flase);
}}}
\
<h4>{{{SimpleAudio.select()}}}</h4>\
This API will allow you to select tracks and/or groups of tracks, which you can then manipulate with track functions.
{{{
    SimpleAudio.select(selector)
}}}
This API has 1 parameter:
* {{{selector}}}: the list of audio track(s) and/or group ID(s), separated by spaces
** this includes pre-defined group IDs like {{{:all}}}, {{{:looped}}}, {{{:muted}}}, {{{:paused}}}, {{{:playing}}} and {{{:stopped}}}
** you can also unselect tracks/groups from a larger selection with {{{:not()}}}
\
> //Examples://
{{{
    SimpleAudio.select(":paused").play();
    SimpleAudio.select(":playing").stop();
    SimpleAudio.select(":playing:not(:ui)").stop();
}}}
\
<h4>{{{SimpleAudio.stop()}}}</h4>\
This API will stop the playback of all registered tracks.
{{{
    SimpleAudio.stop();
}}}
\
<h4>{{{SimpleAudio.unload()}}}</h4>\
This API will both stop the playback of registered tracks and drop their information.
> ''Note:'' unloaded tracks won't be playable until they are loaded again.
{{{
    SimpleAudio.unload();
}}}
\
<h4>{{{SimpleAudio.volume()}}}</h4>\
This API can be used to both get the current master volume level and change it.
{{{
    SimpleAudio.volume([level])
}}}
It has 1 parameter:
* {{{level}}}: (optional, number) the volume level to set, between 0 (silent) and 1 (loudest)
\
> //Examples://
{{{
    var currentMasterVolume = SimpleAudio.volume();

    SimpleAudio.volume(0.75);
}}}
<h3>Tracks SimpleAudio APIs</h3>\
<h4>{{{SimpleAudio.tracks.add()}}}</h4>\
This API will add an audio track and assign it to a given ID. It is similar to {{{<<cacheaudio>>}}}.
{{{
    SimpleAudio.tracks.add(trackId, sources…)
}}}
This API has 2 parameters:
* {{{trackId}}} (string): the ID of the track, to be referenced in other code.
* {{{sources}}} (string/arrays): the source(s) of the track
** only one is required, but you can supply additional formats (none is supported by all browsers)
** the string must be the file's URL, an [[audio passage]] or a data URI
** you can also format it as {{{format|URL}}}, if the file's extension cannot be detected
> //Examples://
{{{
    SimpleAudio.tracks.add("boom", "asset/file.mp3");
    SimpleAudio.tracks.add("boom", "AudioPassageName");
    SimpleAudio.tracks.add("bgm_space", "asset/file.mp3", "asset/file.ogg");
    SimpleAudio.tracks.add("what", "mp3|http://an-audio-service.com/a-user/a-track-id");
}}}
\
<h4>{{{SimpleAudio.tracks.clear()}}}</h4>\
This API will delete all audio tracks.
{{{
    SimpleAudio.tracks.clear()
}}}
> ''Note:'' it won't delete tracks solely under the control of a playlist.
\
<h4>{{{SimpleAudio.tracks.delete()}}}</h4>\
This API will delete audio tracks given the track ID.
> ''Note:'' it won't delete tracks solely under the control of a playlist.
{{{
    SimpleAudio.tracks.delete(trackId)
}}}
This API has 1 parameter:
* {{{trackId}}}: (string) the ID of the track 
> //Example://
{{{
    SimpleAudio.tracks.delete("bgm_space");
}}}
> ''Note:'' any playlist or group containing the track will need to be rebuilt.
\
<h4>{{{SimpleAudio.tracks.get()}}}</h4>\
This API will return the AudioTrack instance of the given track ID. You can also use this API to manipulate singular tracks.
{{{
    SimpleAudio.tracks.get(trackId)
}}}
This API has 1 parameter:
* {{{trackId}}}: (string) the ID of the track 
> //Examples://
{{{
    SimpleAudio.tracks.get("bgm_space");
    SimpleAudio.tracks.get("swamped").volume(1).play();
}}}
<h4>{{{SimpleAudio.tracks.has()}}}</h4>\
This API will check if an audio track exists within the game given a track ID.
{{{
    SimpleAudio.tracks.has(trackId)
}}}
This API has 1 parameter:
* {{{trackId}}}: (string) the ID of the track 
> //Examples://
{{{
    <<if SimpleAudio.tracks.has("bgm_space")>>
        /* Do things */
    <</if>>
}}}
\
<h3>Groups SimpleAudio APIs</h3>\
<h4>{{{SimpleAudio.groups.add()}}}</h4>\
This API lets you create an audio group of track, which can be useful to manipulate multiple tracks at once, or to exclude from a larger set when applying actions.
{{{
    SimpleAudio.groups.add(groupId, trackIds…)
}}}
This API has 2 parameter:
* {{{groupId}}}: (string) the ID of the group, starting with a colon {{{ : }}}
** the name cannot be any of the following {{{:all}}}, {{{:looped}}}, {{{:muted}}}, {{{:not}}}, {{{:paused}}}, {{{:playing}}}, {{{:stopped}}}
> //Example://
{{{
    SimpleAudio.groups.add(":ui", "ui_beep", "ui_boop", "ui_swish");
}}}
\
<h4>{{{SimpleAudio.groups.clear()}}}</h4>\
This API will delete all audio groups.
{{{
    SimpleAudio.groups.clear()
}}}
> ''Note:'' this won't affect the tracks.
\
<h4>{{{SimpleAudio.groups.delete()}}}</h4>
This API will delete the indicated audio group.
> ''Note:'' this won't affect the tracks.
{{{
    SimpleAudio.groups.delete(groupId)
}}}
This API has 1 parameter:
* {{{groupId}}}: (string) the ID of the group
> //Example://
{{{
    SimpleAudio.groups.delete(":ui");
}}}
\
<h4>{{{SimpleAudio.groups.get()}}}</h4>\
This API will return the array of audio tracks given a group ID. You can also use this API to manipulate multiple tracks (of a single group).
> ''Note:'' to select multiple tracks and/or groups, you will need {{{SimpleAudio.select()}}}.
{{{
    SimpleAudio.groups.get(groupsId)
}}}
This API has 1 parameter:
* {{{groupsId}}}: (string) the ID of the group. 
> //Examples://
{{{
    SimpleAudio.groups.get(":ui");
    SimpleAudio.groups.get(":ui").volume(1).play();
}}}
<h4>{{{SimpleAudio.groups.has()}}}</h4>\
This API will check if an audio group exists within the game given a group ID.
{{{
    SimpleAudio.groups.has(groupsId)
}}}
This API has 1 parameter:
* {{{groupsId}}}: (string) the ID of the group 
> //Examples://
{{{
    <<if SimpleAudio.groups.has(":ui")>>
        /* Do things */
    <</if>>
}}}
\
<h3>Lists SimpleAudio APIs</h3>\

