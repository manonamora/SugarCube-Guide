:: Settings [chapter menu] {"position":"1400,1800","size":"200,100"}
<h1>The Settings APIs</h1>
Settings can be a great way to customise your project, and make it more accessible for players. Whether it is to change the visual aspect (font, theme, etc), the audio (volume, track), or overall mechanics (difficulty, annimation), there are many ways to reach your goal.

While including settings in a project can feel a bit overwhelming, as they //will// require some knowledge of JavaScript, the Setting APIs are there to make things easier. There are also many UI templates out there including some settings.
> ''Note:'' Not all templates are up-to-date with the last version of SugarCube. Please do keep this in mind, as older code may be deprecated and will require you to update it yourself.

The basic Settings API is built in this format:
{{{
    Settings.function(parameters)
}}}
> ''Note:'' The order you add the settings in the JavaScript passage will be the order you will see in the Setting dialog box.
* [[Creating a Setting|SettingsBasics]]
* [[Creating a Toggle Setting|SettingsToggle]]
* [[Creating a List Setting|SettingsList]]
* [[Creating a Slider|SettingsRange]]
* [[Going Further with Settings|Settings-More]]
* [[Adding Headers|SettingsHeader]]
> ''Note:'' you can find a Settings-Only Template with the most useful settings for Interactive Fiction on my [[itch page|https://manonamora.itch.io/twine-sugarcube-templates]].

:: SettingsBasics [page settingsapi]
<h1>Creating a Setting</h1>
This API lets you create a setting, without appearing as a control in the built-in Settings popup. It is most useful when building your own Settings controls (like a customised Settings page). This API was used for the //One Page// toggle in the SideBar.
> ''Note:'' this API is unnecessary if you are using the [[Toggle|SettingsToggle]], [[List|SettingsList]] or [[Slider|SettingsRange]] settings.

To create a setting, you need the following API:
{{{
    Setting.addValue(name[, definition])
}}}
\
This API has 2 main parameters:
* {{{name}}}: the name of the settings variable (string)
* {{{definition}}}: definition of the setting (object, optional)
The //definition// object has multiple options:
* {{{default}}}: default value for the setting (boolean, optional, undefined = false)
* {{{onInit}}}: the function to call when the game starts (optional, function)
* {{{onChange}}}: the function to call when the setting is changed (optional, function)
> ''Note:'' You can use a setting in the code a passage. You would write the variable as such:
> {{{settings.name}}} See [[Going Further with Settings|Settings-More]] for use.

> //Basic Setting//:
{{{
    Setting.addValue("interfaceSetting");
}}}
> //Setting with definition//:
{{{
    Setting.addValue("meaningOfLife", {
        default  : "42%",
        onInit   : function () {
            var size = document.getElementById("life");
            size.style.fontSize = settings.meaningOfLife;
        },
        onChange : function () {
            var size = document.getElementById("life");
            size.style.fontSize = settings.meaningOfLife;
        }
    });
}}}
> ''Note:'' {{{Setting.addValue()}}} should not create settings that could affect the game like a regular variable would, as it will be shared with all the playthroughs created by the player.

:: SettingsHeader [page settingsapi] {"position":"1400,1900","size":"100,100"}
<h1>Adding Headers</h1>
If you want to customise the Setting Dialog Box or organise your settings, you can group those under a Header. This will indicate to users the kind of settings they can expect below.
{{{
    Setting.addHeader(name [, description])
}}}
\
This API has 2 parameters :
* {{{name}}}: the name of the header (string)
* {{{desc}}}: description of the group of settings (string, optional)

> //Examples://
{{{
→ Only a header
    Setting.addHeader("Font Settings");

→ A header and a description
    Setting.addHeader("Font Settings", "Settings controlling how the text is formatted.");

→ Only a description
    Setting.addHeader("", "Settings controlling how the text is formatted.");
}}}

:: SettingsToggle [page settingsapi] {"position":"1500,1900","size":"100,100"}
<h1>Creating a Toggle Setting</h1>
Like the name suggests, this type of settings create a toggle. This type is best used for settings with a True/False options. For example: toggling a widescreen or autosaving.

To add a Toggle setting, you need the following API:
{{{
    Setting.addToggle(name, definition)
}}}
\
This API has 2 main parameters:
* {{{name}}}: the name of the settings variable (string)
* {{{definition}}}: definition of the setting (object)
The //definition// object has multiple options:
* {{{label}}}: visible description of the setting (string)
* {{{desc}}}: further description of the setting (string, optional)
* {{{default}}}: default value for the setting (boolean, optional, undefined = false)
* {{{onInit}}}: the function to call when the game starts (optional, function)
* {{{onChange}}}: the function to call when the setting is changed (optional, function)
> ''Note:'' You can use a setting in the code a passage. You would write the variable as such:
> {{{settings.name}}} See [[Going Further with Settings|Settings-More]] for use.

> //Basic Toggle Setting to create a boolean setting//:
{{{
    Setting.addToggle("notifications", {
	    label : "Show notifications?" 
    });
→ the default value not defined, so false is used

    :: Story Passage
    <<if settings.notifications is true>> 
        /* your code/text  */
    <</if>>
}}}
> //Toggle Setting to add/remove a CSS class//:
{{{
    var settingNotifications = function () {
        if (settings.notifications) { // is true
            $("html").addClass("notifications");
        }
        else { // is false
            $("html").removeClass("notifications");
        }
    };
    Setting.addToggle("notifications", {
        label    : "Display Notifications?",
        desc     : "If enabled, you will be shown notifications throughout the game",
        default  : false,
        onInit   : settingNotifications,
        onChange : settingNotifications
    });

→ In your CSS, you'll need to include the following:
    html.notifications .macro-notif {
	    display: none;
    }
}}}
> ''Note:'' this assumes that the notification element/macro uses the class {{{.macro-notif}}}.

:: SettingsList [page settingsapi] {"position":"1400,2000","size":"100,100"}
<h1>Creating a List Setting</h1>
Like the name suggests, this type of settings create a (dropdown) list. This type is best used for settings with more than 2 options or options with names. For example: a theme change setting or font settings.

To add a Toggle setting, you need the following API:
{{{
    Setting.addList(name, definition)
}}}
\
This API has 2 main parameters:
* {{{name}}}: the name of the settings variable (string)
* {{{definition}}}: definition of the setting (object)
The //definition// object has multiple options:
* {{{label}}}: visible description of the setting (string)
* {{{list}}}: the list of options (array of string)
* {{{desc}}}: further description of the setting (string, optional)
* {{{default}}}: default value for the setting (string from array, optional, undefined = 1st of array)
* {{{onInit}}}: the function to call when the game starts (optional, function)
* {{{onChange}}}: the function to call when the setting is changed (optional, function)
> ''Note:'' You can use a setting in the code a passage. You would write the variable as such:
> {{{settings.name}}} See [[Going Further with Settings|Settings-More]] for use.

> //Basic List Setting, creating a string setting variable//:
{{{
    Setting.addList("difficulty", {
        label   : "Choose a difficulty level.",
        list    : ["Easy", "Normal", "Hard", "INSANE"],
        default : "Normal"
    });

    :: Story Passage
    <<if settings.difficulty is "Normal">> 
        /* your code/text  */
    <</if>>
}}}
> //List Setting to add/remove a CSS class//:
{{{
    var settingThemeNames = ["Base", "Reverse", "Night", "Light"];
    var settingThemeHandler = function () {
        var $html = $("html");
        // remove any existing theme class
            $html.removeClass("theme-reverse theme-night theme-light");
        // switch on the theme name to add the requested theme class
            switch (settings.theme) {
                case "Reverse":
                    $html.addClass("theme-reverse");
                    break;
                case "Night":
                    $html.addClass("theme-night");
                    break;
                case "Light":
                    $html.addClass("theme-light");
                    break;
            }
    };
    Setting.addList("theme", {
        label    : "Choose a theme.",
        desc     : "This will change the colour palette",
        list     : settingThemeNames,
        default  : "Base",
        onInit   : settingThemeHandler,
        onChange : settingThemeHandler
    });

→ In your CSS: 
    body {color: black;}
    html.theme-reverse body {color: white;}
    html.theme-night body {color: lightgrey;}
    html.theme-light body {color: darkgrey;}
}}}

:: SettingsRange [page settingsapi] {"position":"1500,2000","size":"100,100"}
<h1>Creating a Slider</h1>
Like the name suggests, this type of settings create a slider. This type is best used for settings with a range of value. For example: sound volume.

To add a Toggle setting, you need the following API:
{{{
    Setting.addRange(name, definition)
}}}
\
This API has 2 main parameters:
* {{{name}}}: the name of the settings variable (string)
* {{{definition}}}: definition of the setting (object)
The //definition// object has multiple options:
* {{{label}}}: visible description of the setting (string)
* {{{min}}}: the minimum value (number)
* {{{max}}}: the maximum value (number)
* {{{step}}}: the increment between each step (number, divisible by min & max)
* {{{desc}}}: further description of the setting (string, optional)
* {{{default}}}: default value for the setting (boolean, optional, undefined = false)
* {{{onInit}}}: the function to call when the game starts (optional, function)
* {{{onChange}}}: the function to call when the setting is changed (optional, function)
> ''Note:'' You can use a setting in the code a passage. You would write the variable as such:
> {{{settings.name}}} See [[Going Further with Settings|Settings-More]] for use.

> //Basic Range Setting//:
{{{
    var settingMasterVolumeHandler = function () {
	    SimpleAudio.volume(settings.masterVolume / 10);
    };
    Setting.addRange("masterVolume", {
        label    : "Master volume.",
        min      : 0,
        max      : 10,
        step     : 1,
        onInit   : settingMasterVolumeHandler,
        onChange : settingMasterVolumeHandler
    });
}}}

:: Settings-More [page settingsapi] {"position":"1400,2100","size":"100,100"}
<h1>Going Further with Settings</h1>
The Settings APIs doesn't just allow you to create settings, but use the value of settings for code both in JavaScript and in story passages as well as change it ouside of the Settings Dialog Box.

<h3>Use the value of a Setting in code</h3>\
To use the value of a Setting in code, you can either use the {{{settings}}} variable or the {{{Setting.getValue()}}} API.
{{{
    settings.nameOfTheSetting
    Setting.getValue('nameOfTheSetting')
}}}
Both can be used interchangeably, though the latter is preferred in JavaScript code.

Assuming that a setting has been set up with the name {{{notification}}}:
{{{
→ For a Toggle Setting:
    <<if settings.notification>>
        <<notify 5s>>This is a notification only seen if the notification setting is toggled on<</notify>>
    <</if>>
    <<if Setting.getValue('notification')>><</if>>

→ For a Range Setting:
    <<if settings.notification gt 9>>
        <<notify 5s>>This is very loud!<</notify>>
    <</if>>
    <<if Setting.getValue('notification') gt 9>><</if>>

→ For a List Setting:
    <<if settings.notification is "Easy">>
        <<notify 5s>>You are playing on BabyMode<</notify>>
    <</if>>
    <<if Setting.getValue('notification') is "Easy">><</if>>

→ In JavaScript (boolean):
    if (settings.notification) {
	    /* Notifications should be enabled */
    }
    if (Setting.getValue('notification')){}
}}}
> ''Note:'' the {{{<<notify>>}}} macro is a [[Custom Macro by Chapel|https://github.com/ChapelR/custom-macros-for-sugarcube-2/blob/master/docs/notify-macro.md]].

<h3>Changing the value of a Setting</h3>\
There are a handful of APIs to modify and save the value of Setting, outside of the Built-In Dialog Box that the players can interact with. These can be especially useful when building a custom Setting page or at the start of a game (Accessibility Settings or Language).
* {{{Setting.setValue()}}} will set a new value to the indicated setting.
* {{{Setting.save()}}} will save any change made to any {{{settings}}} variable.
** this API is automatically triggered in the Settings Dialog Box and when using {{{Setting.setValue()}}}.
* {{{Setting.reset()}}} will reset a(ll) setting(s) to its(their) default value.
> ''Note:'' the targeted setting needs to be set in the JavaScript beforehand.
> In a passage, you also need to use the macros {{{<<script>>}}} or {{{<<run>>}}}.
\
> //To save://
{{{
→ With setValue():
    Setting.setValue(name, value);
    <<run Setting.setValue('difficulty', 'Normal');>>

→ With save():
    <<set settings.difficulty to "Normal">>
    <<run Setting.save()>>
}}}
> ''Note:'' The new value for the setting must make sense for the setting (i.e. not indicating {{{true/false}}} for a string), or it will mess with the game running.
\
> //To reset://
{{{
→ all settings to default:
    Setting.reset()

→ only reset one setting: 
    Setting.reset('difficulty')

→ in a macro:
    <<run Setting.reset('difficulty')>>
}}}

> ''Note:'' while {{{Setting.load()}}} API does exist, it is called automatically everytime the game is loaded. As such, it should never be called manually.
